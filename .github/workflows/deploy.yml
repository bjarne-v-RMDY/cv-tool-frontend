name: Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: cvtool-ui
  AZURE_RESOURCE_GROUP: az-rg-rmdy-cv-agent
  CONTAINER_REGISTRY: crRmdyCvAgent
  CONTAINER_APP_ENVIRONMENT: cvtool-env
  CONTAINER_APP_NAME: cvtool-app
  LOG_WORKSPACE_NAME: cvtool-logs
  LOCATION: 'France Central'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          corepack enable pnpm
          pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      # Login to Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: crrmdycvagent.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE="crrmdycvagent.azurecr.io/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }}"
          echo "Building image: $IMAGE"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Azure Container Apps provider is registered
        run: |
          az provider register --namespace Microsoft.App --wait
          az provider register --namespace Microsoft.OperationalInsights --wait

      # Create or reuse Log Analytics workspace
      - name: Ensure Log Analytics workspace exists
        run: |
          if ! az monitor log-analytics workspace show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --workspace-name ${{ env.LOG_WORKSPACE_NAME }} >/dev/null 2>&1; then
            echo "Creating Log Analytics workspace..."
            az monitor log-analytics workspace create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --workspace-name ${{ env.LOG_WORKSPACE_NAME }} \
              --location ${{ env.LOCATION }} \
              --only-show-errors
          else
            echo "Log Analytics workspace already exists."
          fi

      # Create or reuse Container Apps Environment
      - name: Ensure Container Apps Environment exists
        run: |
          LOG_ANALYTICS_ID=$(az monitor log-analytics workspace show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --workspace-name ${{ env.LOG_WORKSPACE_NAME }} \
            --query "id" -o tsv)

          if ! az containerapp env show \
            --name ${{ env.CONTAINER_APP_ENVIRONMENT }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Creating Container Apps environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENVIRONMENT }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }} \
              --logs-workspace-id "$LOG_ANALYTICS_ID" \
              --only-show-errors
          else
            echo "Container Apps environment already exists."
          fi

      # Deploy or update Container App
      - name: Deploy or update Azure Container App
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE="crrmdycvagent.azurecr.io/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }}"
          echo "Deploying image: $IMAGE"

          # Check if Container App exists
          if az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Updating existing Container App..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image "$IMAGE" \
              --set-env-vars azure_sql_server=${{ secrets.azure_sql_server }} \
                            azure_sql_database=${{ secrets.azure_sql_database }} \
                            azure_sql_user=${{ secrets.azure_sql_user }} \
                            azure_sql_password=${{ secrets.azure_sql_password }} \
                            azure_storage_connection_string=${{ secrets.azure_storage_connection_string }} \
                            next_public_base_url=https://${{ env.CONTAINER_APP_NAME }}.${{ env.CONTAINER_APP_ENVIRONMENT }}.azurecontainerapps.io \
              --resources-cpu 0.25 \
              --resources-memory 0.5Gi \
              --scale-min-replicas 0 \
              --scale-max-replicas 1 \
              --only-show-errors
          else
            echo "Creating new Container App..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
              --image "$IMAGE" \
              --target-port 3000 \
              --ingress external \
              --registry-server crrmdycvagent.azurecr.io \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --env-vars azure_sql_server=${{ secrets.azure_sql_server }} \
                        azure_sql_database=${{ secrets.azure_sql_database }} \
                        azure_sql_user=${{ secrets.azure_sql_user }} \
                        azure_sql_password=${{ secrets.azure_sql_password }} \
                        azure_storage_connection_string=${{ secrets.azure_storage_connection_string }} \
                        next_public_base_url=https://${{ env.CONTAINER_APP_NAME }}.${{ env.CONTAINER_APP_ENVIRONMENT }}.azurecontainerapps.io \
              --resources-cpu 0.25 \
              --resources-memory 0.5Gi \
              --scale-min-replicas 0 \
              --scale-max-replicas 1 \
              --only-show-errors
          fi
