name: Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: cvtool-ui
  AZURE_RESOURCE_GROUP: az-rg-rmdy-cv-agent
  CONTAINER_REGISTRY: crRmdyCvAgent
  CONTAINER_APP_ENVIRONMENT: cvtool-env
  CONTAINER_APP_NAME: cvtool-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.CONTAINER_REGISTRY }}.azurecr.io/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }} .
        docker push ${{ env.CONTAINER_REGISTRY }}.azurecr.io/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }}

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Register Container Apps provider
      run: |
        az provider register --namespace Microsoft.App --wait
        az provider show --namespace Microsoft.App --query "registrationState"

    - name: Create Container Apps Environment (if not exists)
      if: github.ref == 'refs/heads/main'
      run: |
        az containerapp env create \
          --name ${{ env.CONTAINER_APP_ENVIRONMENT }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --location 'France Central' \
          --only-show-errors || echo "Environment already exists"

    - name: Deploy to Azure Container Apps
      if: github.ref == 'refs/heads/main'
      run: |
        # Create container app with registry authentication using YAML approach
        cat > containerapp.yaml << EOF
        properties:
          configuration:
            activeRevisionsMode: Single
            ingress:
              external: true
              targetPort: 3000
            registries:
            - server: ${{ env.CONTAINER_REGISTRY }}.azurecr.io
              username: ${{ secrets.ACR_USERNAME }}
              passwordSecretRef: acr-password
            secrets:
            - name: acr-password
              value: ${{ secrets.ACR_PASSWORD }}
          template:
            containers:
            - name: ${{ env.CONTAINER_APP_NAME }}
              image: ${{ env.CONTAINER_REGISTRY }}.azurecr.io/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }}
              resources:
                cpu: 0.25
                memory: 0.5Gi
            scale:
              minReplicas: 0
              maxReplicas: 1
        EOF
        
        # Create or update container app using YAML
        az containerapp create \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
          --yaml containerapp.yaml \
          --only-show-errors || \
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --yaml containerapp.yaml \
          --only-show-errors

          